---
name: build-s2i-python-kopf-pr
on:
  pull_request:
    paths:
      - build-s2i-python-kopf/**
      - .github/workflows/build-s2i-python-kopf-pr.yaml
jobs:
  test:
    env:
      CONTEXT_DIR: build-s2i-python-kopf
      IMAGE_NAME: python-kopf-s2i
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
      - name: Check and verify version.json
        id: check_version
        run: |
          # version.json must have semantic version: vMAJOR.MINOR.PATCH
          VERSION=$(jq -r '.version' ${CONTEXT_DIR}/version.json)
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "${CONTEXT_DIR}/version.json does not contain semantic version, vMAJOR.MINOR.PATCH"
              exit 1
          fi
          echo ::set-output name=VERSION::$VERSION
          echo ::set-output name=MINOR_VERSION::${VERSION%.*}
          sed -i -e "s/^FROM .*/FROM ${IMAGE_NAME}:${VERSION}/" ${CONTEXT_DIR}/examples/kopf-simple/Dockerfile
      - name: Build s2i image
        uses: redhat-actions/buildah-build@v2
        with:
          context: ${{ env.CONTEXT_DIR }}
          dockerfiles: |
            ./${{ env.CONTEXT_DIR }}/Dockerfile
          image: ${{ env.IMAGE_NAME }}
          oci: true
          tags: ${{ steps.check_version.outputs.VERSION }}
      - name: Build kopf-simple example from s2i image
        uses: redhat-actions/buildah-build@v2
        with:
          context: ${{ env.CONTEXT_DIR }}/examples/kopf-simple
          dockerfiles: |
            ./${{ env.CONTEXT_DIR }}/examples/kopf-simple
          image: ${{ env.IMAGE_NAME }}-example
          oci: true
          tags: ${{ steps.check_version.outputs.VERSION }}
      - name: Test image
        run: |
          EXAMPLE_IMAGE="${IMAGE_NAME}-example:${{ steps.check_version.outputs.VERSION }}"

          echo "Checking kopf version..."
          KOPF_VERSION="$(podman run --entrypoint '/bin/sh' $EXAMPLE_IMAGE -c 'kopf --version')"
          if [[ "$KOPF_VERSION" != 'kopf, version ${{ steps.check_version.outputs.MINOR_VERSION }}' ]]; then
            echo "$KOPF_VERSION not expected ${{ steps.check_version.outputs.MINOR_VERSION }}"
          fi

          echo "Checking example operator.py..."
          podman run --entrypoint '/bin/sh' $EXAMPLE_IMAGE -c 'python3 -m py_compile /opt/app-root/operator/operator.py'

          echo "Check example requirements were installed..."
          podman run --entrypoint '/bin/sh' $EXAMPLE_IMAGE -c 'python3 -c "import yaml"'
